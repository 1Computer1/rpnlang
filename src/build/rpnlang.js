/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var rpnlang = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,40],$V5=[1,64],$V6=[1,63],$V7=[1,54],$V8=[1,55],$V9=[1,56],$Va=[1,31],$Vb=[1,32],$Vc=[1,33],$Vd=[1,34],$Ve=[1,35],$Vf=[1,45],$Vg=[1,46],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,38],$VA=[1,39],$VB=[1,41],$VC=[1,70],$VD=[1,43],$VE=[1,71],$VF=[1,44],$VG=[10,13,17,20,21,22,34,35,36,37,38,40,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,76,77,80,81],$VH=[5,10,13,17,20,21,22,34,35,36,37,38,39,40,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,74,76,77,80,81,82,85],$VI=[68,74],$VJ=[1,109],$VK=[1,111],$VL=[1,112],$VM=[39,68],$VN=[1,132],$VO=[68,82],$VP=[40,43,45,46],$VQ=[21,53,54],$VR=[39,72];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"PROGRAM":3,"STATEMENT_LIST":4,";":5,"EOF":6,"STATEMENT":7,"ASSIGN_STATEMENT":8,"PRINT_STATEMENT":9,"NAME":10,"ASSIGN_TOKEN":11,"EXPRESSION":12,"<<":13,"STRING":14,"=":15,"#=":16,">>":17,"#>":18,"PRINT_TOKEN":19,">":20,"<":21,"!":22,"OPERATION":23,"LITERAL":24,"OPERATOR":25,"GET":26,"INDEX":27,"LAMBDA":28,"CALL":29,"BRANCH":30,"CASES":31,"STACK":32,"ITERATE":33,"NUMBER":34,"!!":35,"!?":36,"!%":37,"[":38,"]":39,"'":40,"CHARACTERS":41,"CHARACTER":42,"ANY":43,"ESCAPE":44,"CHAR_ESCAPE":45,"HEX_ESCAPE":46,"OPERATOR_TOKEN":47,"+":48,"-":49,"*":50,"/":51,"%":52,"&":53,"|":54,"^":55,"?":56,"~":57,">=":58,"<=":59,"==":60,"!=":61,"//":62,"**":63,"&&":64,"||":65,">>>":66,"$":67,",":68,"SLICE":69,"::":70,".":71,"(":72,"NAME_LIST":73,")":74,"=>":75,"@":76,"#":77,"...":78,"CALL_TOKEN":79,"$@":80,"{":81,"}":82,"CASE_LIST":83,"CASE_ENTRY":84,":":85,"STACK_OPERATOR":86,"ITERATE_MODE":87,"ITERATE_TOKEN":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:";",6:"EOF",10:"NAME",13:"<<",15:"=",16:"#=",17:">>",18:"#>",20:">",21:"<",22:"!",34:"NUMBER",35:"!!",36:"!?",37:"!%",38:"[",39:"]",40:"'",43:"ANY",45:"CHAR_ESCAPE",46:"HEX_ESCAPE",48:"+",49:"-",50:"*",51:"/",52:"%",53:"&",54:"|",55:"^",56:"?",57:"~",58:">=",59:"<=",60:"==",61:"!=",62:"//",63:"**",64:"&&",65:"||",66:">>>",67:"$",68:",",70:"::",71:".",72:"(",74:")",75:"=>",76:"@",77:"#",78:"...",80:"$@",81:"{",82:"}",85:":"},
productions_: [0,[3,3],[3,1],[4,1],[4,3],[7,1],[7,1],[8,3],[8,3],[11,1],[11,1],[11,1],[11,1],[9,2],[19,1],[19,1],[19,1],[12,1],[12,2],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[24,1],[24,1],[24,1],[24,1],[24,2],[24,1],[14,3],[14,2],[41,1],[41,2],[42,1],[42,1],[44,1],[44,1],[25,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[26,2],[26,6],[26,2],[26,6],[26,3],[26,7],[27,5],[28,7],[28,4],[28,5],[73,1],[73,3],[73,2],[73,0],[29,1],[29,2],[29,6],[79,1],[79,1],[30,5],[30,3],[31,3],[83,1],[83,3],[84,3],[32,3],[32,3],[32,5],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[33,5],[33,6],[87,1],[87,1],[88,1],[88,1],[88,1],[69,1],[69,2],[69,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-2]; 
break;
case 2:
 return []; 
break;
case 3: case 17: case 78: case 90:
this.$ = [$$[$0]];
break;
case 4: case 79: case 91:

            this.$ = $$[$0-2];
            this.$.push($$[$0]);
        
break;
case 7:

            this.$ = {
                type: 'assign',
                token: $$[$0-1],
                name: $$[$0-2],
                expression: $$[$0],
                pos: this._$
            };
        
break;
case 8:

            this.$ = {
                type: 'assign',
                token: $$[$0-1],
                name: $$[$0-2],
                expression: [$$[$0]],
                pos: this._$
            };
        
break;
case 13:

            this.$ = {
                type: 'print',
                token: $$[$0-1],
                expression: $$[$0],
                pos: this._$
            };
        
break;
case 18:

            this.$ = $$[$0-1];
            this.$.push($$[$0]);
        
break;
case 29:
this.$ = Number($$[$0]);
break;
case 30:
this.$ = true;
break;
case 31:
this.$ = false;
break;
case 32:
this.$ = NaN;
break;
case 33:
this.$ = undefined;
break;
case 35:
this.$ = $$[$0-1];
break;
case 36:
this.$ = '';
break;
case 38:
this.$ = $$[$0-1] + $$[$0];
break;
case 41:

            this.$ = {
                '0': '\0',
                'b': '\b',
                'f': '\f',
                'n': '\n',
                'r': '\r',
                't': '\t',
                'v': '\v',
                '\'': '\'',
                '\\': '\\',
            }[yytext.slice(1)];
        
break;
case 42:

            const num = parseInt(yytext.slice(2, -1), 16);
            this.$ = String.fromCharCode(num);
        
break;
case 43:

            this.$ = {
                type: 'operator',
                token: $$[$0],
                pos: this._$
            };
        
break;
case 68:

            this.$ = {
                type: 'get',
                token: $$[$0-1],
                name: $$[$0],
                pos: this._$
            };
        
break;
case 69:

            this.$ = {
                type: 'get',
                token: '$...',
                name: $$[$0-3],
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 70:

            this.$ = {
                type: 'get',
                token: '$',
                module: true,
                name: $$[$0],
                pos: this._$
            };
        
break;
case 71:

            this.$ = {
                type: 'get',
                token: '$...',
                module: true,
                name: $$[$0-3],
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 72:

            this.$ = {
                type: 'get',
                token: '$',
                module: $$[$0-2],
                name: $$[$0],
                pos: this._$
            };
        
break;
case 73:

            this.$ = {
                type: 'get',
                token: '$...',
                module: $$[$0-6],
                name: $$[$0-3],
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 74:

            this.$ = {
                type: 'index',
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 75:

            this.$ = {
                type: 'lambda',
                params: $$[$0-5],
                expression: $$[$0-1],
                pos: this._$
            };
        
break;
case 76:

            this.$ = {
                type: 'lambda',
                params: [],
                expression: $$[$0-1],
                call: {
                    token: $$[$0-2],
                    pos: this._$
                },
                pos: this._$
            };
        
break;
case 77:

            this.$ = {
                type: 'lambda',
                params: [],
                expression: $$[$0-1],
                call: {
                    token: $$[$0-3] + $$[$0-2],
                    pos: this._$
                },
                pos: this._$
            };
        
break;
case 80:

            this.$ = [$$[$0]];
            this.$.rest = true;
        
break;
case 81:
this.$ = [];
break;
case 82:

            this.$ = {
                type: 'call',
                token: $$[$0],
                pos: this._$
            };
        
break;
case 83:

            this.$ = {
                type: 'call',
                token: $$[$0-1] + $$[$0],
                pos: this._$
            };
        
break;
case 84:

            this.$ = {
                type: 'call',
                token: $$[$0-5] + $$[$0-3],
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 87:

            this.$ = {
                type: 'branch',
                yes: $$[$0-3],
                no: $$[$0-1],
                pos: this._$
            };
        
break;
case 88:

            this.$ = {
                type: 'branch',
                yes: $$[$0-1],
                pos: this._$
            };
        
break;
case 89:

            this.$ = {
                type: 'cases',
                cases: $$[$0-1]
            };
        
break;
case 92:

            this.$ = {
                type: 'branch',
                condition: $$[$0-2],
                yes: $$[$0]
            };
        
break;
case 93: case 94:

            this.$ = {
                type: 'stack',
                token: $$[$0-1],
                pos: this._$
            };
        
break;
case 95:

            this.$ = {
                type: 'stack',
                token: $$[$0-3],
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 104:

            this.$ = {
                type: 'iterate',
                lambda: $$[$0-3],
                mode: $$[$0-2],
                token: $$[$0-1],
                pos: this._$
            };
        
break;
case 105:

            this.$ = {
                type: 'iterate',
                lambda: $$[$0-4],
                condition: $$[$0-1],
                mode: $$[$0-3],
                token: $$[$0-2],
                pos: this._$
            };
        
break;
case 111:

            this.$ = {
                type: 'slice',
                index: $$[$0],
                pos: this._$
            };
        
break;
case 112:

            this.$ = {
                type: 'slice',
                from: $$[$0-1],
                pos: this._$
            };
        
break;
case 113:

            this.$ = {
                type: 'slice',
                from: $$[$0-2],
                to: $$[$0],
                pos: this._$
            };
        
break;
}
},
table: [{3:1,4:2,6:[1,3],7:4,8:5,9:6,10:$V0,19:8,20:$V1,21:$V2,22:$V3},{1:[3]},{5:[1,12]},{1:[2,2]},{5:[2,3]},{5:[2,5]},{5:[2,6]},{11:13,13:[1,14],15:[1,15],16:[1,16],17:[1,17],18:[1,18]},{10:$V4,12:19,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VG,[2,14]),o($VG,[2,15]),o($VG,[2,16]),{6:[1,72],7:73,8:5,9:6,10:$V0,19:8,20:$V1,21:$V2,22:$V3},{10:$V4,12:74,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},{14:75,40:$Vf},o($VG,[2,9]),o($VG,[2,10]),o($VG,[2,11]),o($VG,[2,12]),{5:[2,13],10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VH,[2,17]),o($VH,[2,19]),o($VH,[2,20]),o($VH,[2,21]),o($VH,[2,22]),o($VH,[2,23]),o($VH,[2,24]),o($VH,[2,25]),o($VH,[2,26]),o($VH,[2,27]),o($VH,[2,28]),o($VH,[2,29]),o($VH,[2,30]),o($VH,[2,31]),o($VH,[2,32]),{20:[1,83],21:[1,84],22:[1,89],28:82,39:[1,77],48:[1,85],49:[1,86],52:[1,90],53:[1,87],56:[1,81],70:[1,78],71:[1,79],72:$VB,76:[1,88],86:80},o($VH,[2,34]),o($VH,[2,43]),{10:[1,91],38:[1,92]},{10:[1,93]},{38:[1,95],70:[1,94]},o($VI,[2,81],{73:96,10:[1,99],76:[1,97],77:[1,98],78:[1,100]}),o($VH,[2,82]),{38:[1,102],76:$VC,79:101,80:$VE},{10:$V4,12:103,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF,83:104,84:105},{40:[1,107],41:106,42:108,43:$VJ,44:110,45:$VK,46:$VL},o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,55]),o($VH,[2,56]),o($VH,[2,57]),o($VH,[2,58]),o($VH,[2,59]),o($VH,[2,60]),o($VH,[2,61]),o($VH,[2,62]),o($VH,[2,63]),o($VH,[2,64]),o($VH,[2,65]),o($VH,[2,66]),o($VH,[2,67]),o($VH,[2,85]),o($VH,[2,86]),{1:[2,1]},{5:[2,4]},{5:[2,7],10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},{5:[2,8]},o($VH,[2,18]),o($VH,[2,33]),{10:[1,113]},{68:[1,114]},{39:[1,115],68:[1,116]},{39:[1,117]},{76:[1,120],77:[1,119],87:118},o($VM,[2,96]),o($VM,[2,97]),o($VM,[2,98]),o($VM,[2,99]),o($VM,[2,100]),o($VM,[2,101]),o($VM,[2,102]),o($VM,[2,103]),o($VH,[2,68]),{10:[1,121]},o($VH,[2,70]),{10:[1,122]},{70:[1,123]},{68:[1,125],74:[1,124]},{10:$V4,12:126,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},{76:[1,127]},o($VI,[2,78]),{10:[1,128]},o($VH,[2,83]),{76:$VC,79:129,80:$VE},{10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:[1,130],70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF,82:[1,131],85:$VN},{68:[1,134],82:[1,133]},o($VO,[2,90]),{40:[1,135],42:136,43:$VJ,44:110,45:$VK,46:$VL},o($VH,[2,36]),o($VP,[2,37]),o($VP,[2,39]),o($VP,[2,40]),o($VP,[2,41]),o($VP,[2,42]),{68:[1,137]},{10:$V4,12:139,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,69:138,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VH,[2,93]),{10:$V4,12:139,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,69:140,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VH,[2,94]),{21:[1,144],53:[1,142],54:[1,143],88:141},o($VQ,[2,106]),o($VQ,[2,107]),{68:[1,145]},o($VH,[2,72]),{10:[1,146]},{75:[1,147]},{10:[1,148]},{10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,74:[1,149],76:$VC,77:$VD,79:42,80:$VE,81:$VF},{10:$V4,12:150,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VI,[2,80]),{68:[1,151]},{10:$V4,12:152,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VH,[2,88]),{10:$V4,12:153,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VH,[2,89]),{10:$V4,12:155,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF,84:154},o($VH,[2,35]),o($VP,[2,38]),{10:$V4,12:139,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,69:156,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},{39:[1,157]},{10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,39:[2,111],40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:[1,158],70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},{39:[1,159]},{28:161,39:[1,160],72:$VB},o($VR,[2,108]),o($VR,[2,109]),o($VR,[2,110]),{10:$V4,12:139,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,69:162,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},{68:[1,163]},{72:[1,164]},o($VI,[2,79]),o($VH,[2,76]),{10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,74:[1,165],76:$VC,77:$VD,79:42,80:$VE,81:$VF},{10:$V4,12:139,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,69:166,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},{10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF,82:[1,167]},o($VO,[2,92],{24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,14:36,47:37,79:42,23:76,10:$V4,13:$V5,17:$V6,20:$V7,21:$V8,22:$V9,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,80:$VE,81:$VF}),o($VO,[2,91]),{10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF,85:$VN},{39:[1,168]},o($VH,[2,74]),{10:$V4,12:169,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,39:[2,112],40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VH,[2,95]),o($VH,[2,104]),{39:[1,170]},{39:[1,171]},{10:$V4,12:139,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,69:172,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},{10:$V4,12:173,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VH,[2,77]),{39:[1,174]},o($VH,[2,87]),o($VH,[2,71]),{10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,39:[2,113],40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VH,[2,105]),o($VH,[2,69]),{39:[1,175]},{10:$V4,13:$V5,14:36,17:$V6,20:$V7,21:$V8,22:$V9,23:76,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:30,34:$Va,35:$Vb,36:$Vc,37:$Vd,38:$Ve,40:$Vf,47:37,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,70:$VA,72:$VB,74:[1,176],76:$VC,77:$VD,79:42,80:$VE,81:$VF},o($VH,[2,84]),o($VH,[2,73]),o($VH,[2,75])],
defaultActions: {3:[2,2],4:[2,3],5:[2,5],6:[2,6],72:[2,1],73:[2,4],75:[2,8]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignore whitespace
break;
case 1:// Ignore comments
break;
case 2:this.begin('CMT');
break;
case 3:this.popState();
break;
case 4:// Ignore comments
break;
case 5:return 34;
break;
case 6:return 34;
break;
case 7:return 34;
break;
case 8:return 34;
break;
case 9:return 10;
break;
case 10:return 66;
break;
case 11:return 78;
break;
case 12:return 16;
break;
case 13:return 18;
break;
case 14:return this.begin('LMB'), '=>';
break;
case 15:return 59;
break;
case 16:return 58;
break;
case 17:return 60;
break;
case 18:return 61;
break;
case 19:return 17;
break;
case 20:return 13;
break;
case 21:return 62;
break;
case 22:return 63;
break;
case 23:return 64;
break;
case 24:return 65;
break;
case 25:return 80;
break;
case 26:return 36;
break;
case 27:return 35;
break;
case 28:return 37;
break;
case 29:return 70;
break;
case 30:return this.begin('STR'), '\'';
break;
case 31:return "CHAR_ESCAPE";
break;
case 32:return "HEX_ESCAPE";
break;
case 33:return this.popState(), '\'';
break;
case 34:return "ANY";
break;
case 35:return 15;
break;
case 36:return 77;
break;
case 37:return 76;
break;
case 38:return 67;
break;
case 39:return 68;
break;
case 40:return 71;
break;
case 41:return 85;
break;
case 42:return 5;
break;
case 43:return 38;
break;
case 44:return 39;
break;
case 45:return 81;
break;
case 46:return 82;
break;
case 47:return 72;
break;
case 48:return 74;
break;
case 49:return this.popState(), ')';
break;
case 50:return 48;
break;
case 51:return 49;
break;
case 52:return "*";
break;
case 53:return 51;
break;
case 54:return 20;
break;
case 55:return 21;
break;
case 56:return 22;
break;
case 57:return 56;
break;
case 58:return 57;
break;
case 59:return 52;
break;
case 60:return 55;
break;
case 61:return 53;
break;
case 62:return 54;
break;
case 63:return 6;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:[\s\S])/,/^(?:-?0[bB][01]+)/,/^(?:-?0[oO][0-7]+)/,/^(?:-?0[xX]([0-9a-fA-F])+)/,/^(?:-?(\d+(?:\.\d+)?)((?:[eE][+-]?[0-9]+))?)/,/^(?:([A-Za-z_])\w*)/,/^(?:>>>)/,/^(?:\.\.\.)/,/^(?:#=)/,/^(?:#>)/,/^(?:=>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\/\/)/,/^(?:\*\*)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\$@)/,/^(?:!\?)/,/^(?:!!)/,/^(?:!%)/,/^(?:::)/,/^(?:')/,/^(?:\\[0bfnrtv'\\])/,/^(?:\\\{([0-9a-fA-F]){1,6}\})/,/^(?:')/,/^(?:.)/,/^(?:=)/,/^(?:#)/,/^(?:@)/,/^(?:\$)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:\?)/,/^(?:~)/,/^(?:%)/,/^(?:\^)/,/^(?:&)/,/^(?:\|)/,/^(?:$)/],
conditions: {"STR":{"rules":[31,32,33,34],"inclusive":false},"CMT":{"rules":[3,4],"inclusive":false},"LMB":{"rules":[0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true},"INITIAL":{"rules":[0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = rpnlang;
exports.Parser = rpnlang.Parser;
exports.parse = function () { return rpnlang.parse.apply(rpnlang, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}