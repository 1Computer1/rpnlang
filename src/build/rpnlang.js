/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var rpnlang = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,48],$V5=[1,49],$V6=[1,50],$V7=[1,30],$V8=[1,35],$V9=[1,64],$Va=[1,65],$Vb=[1,40],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[1,31],$Vx=[1,32],$Vy=[1,33],$Vz=[1,34],$VA=[1,66],$VB=[1,37],$VC=[1,38],$VD=[1,39],$VE=[16,17,18,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,64,65,67,74,79,86],$VF=[5,16,17,18,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,64,65,67,74,76,79,80,83,86],$VG=[34,76],$VH=[1,99],$VI=[1,101],$VJ=[1,102],$VK=[34,36],$VL=[1,117],$VM=[34,80],$VN=[67,70,72,73],$VO=[17,44,45],$VP=[36,74];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"PROGRAM":3,"STATEMENT_LIST":4,";":5,"EOF":6,"STATEMENT":7,"ASSIGN_STATEMENT":8,"PRINT_STATEMENT":9,"NAME":10,"ASSIGN_TOKEN":11,"EXPRESSION":12,"=":13,"#=":14,"PRINT_TOKEN":15,">":16,"<":17,"!":18,"OPERATION":19,"TOKEN":20,"CALL":21,"LITERAL":22,"LAMBDA":23,"BRANCH":24,"CASES":25,"GET":26,"INDEX":27,"STACK":28,"ITERATE":29,"OPERATOR":30,"CALL_TOKEN":31,"#":32,"[":33,",":34,"SLICE":35,"]":36,"@":37,"$@":38,"+":39,"-":40,"*":41,"/":42,"%":43,"&":44,"|":45,"^":46,"?":47,"~":48,">=":49,"<=":50,"==":51,"!=":52,">>":53,"<<":54,"//":55,"**":56,"&&":57,"||":58,">>>":59,".":60,"STACK_OPERATOR":61,"NUMBER":62,"!!":63,"!?":64,"!%":65,"STRING":66,"'":67,"CHARACTERS":68,"CHARACTER":69,"ANY":70,"ESCAPE":71,"CHAR_ESCAPE":72,"HEX_ESCAPE":73,"(":74,"NAME_LIST":75,")":76,"=>":77,"...":78,"{":79,"}":80,"CASE_LIST":81,"CASE_ENTRY":82,":":83,"ITERATE_MODE":84,"ITERATE_TOKEN":85,"$":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:";",6:"EOF",10:"NAME",13:"=",14:"#=",16:">",17:"<",18:"!",32:"#",33:"[",34:",",36:"]",37:"@",38:"$@",39:"+",40:"-",41:"*",42:"/",43:"%",44:"&",45:"|",46:"^",47:"?",48:"~",49:">=",50:"<=",51:"==",52:"!=",53:">>",54:"<<",55:"//",56:"**",57:"&&",58:"||",59:">>>",60:".",62:"NUMBER",63:"!!",64:"!?",65:"!%",67:"'",70:"ANY",72:"CHAR_ESCAPE",73:"HEX_ESCAPE",74:"(",76:")",77:"=>",78:"...",79:"{",80:"}",83:":",86:"$"},
productions_: [0,[3,3],[3,1],[4,1],[4,3],[7,1],[7,1],[8,3],[11,1],[11,1],[9,2],[15,1],[15,1],[15,1],[12,1],[12,2],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[20,1],[21,1],[21,2],[21,6],[31,1],[31,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[27,5],[28,3],[28,5],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,1],[66,3],[66,2],[68,1],[68,2],[69,1],[69,1],[71,1],[71,1],[23,7],[23,4],[23,5],[75,1],[75,3],[75,2],[75,0],[24,5],[24,3],[25,3],[81,1],[81,3],[82,3],[29,5],[29,6],[84,1],[84,1],[85,1],[85,1],[85,1],[26,2],[26,6],[35,1],[35,2],[35,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-2]; 
break;
case 2:
 return []; 
break;
case 3: case 14: case 85: case 92:
this.$ = [$$[$0]];
break;
case 4: case 86: case 93:

            this.$ = $$[$0-2];
            this.$.push($$[$0]);
        
break;
case 7:

            this.$ = {
                type: 'assign',
                token: $$[$0-1],
                name: $$[$0-2],
                expression: $$[$0],
                pos: this._$
            };
        
break;
case 10:

            this.$ = {
                type: 'print',
                token: $$[$0-1],
                expression: $$[$0],
                pos: this._$
            };
        
break;
case 15:

            this.$ = $$[$0-1];
            this.$.push($$[$0]);
        
break;
case 26:

            this.$ = {
                type: 'operator',
                token: $$[$0],
                pos: this._$
            };
        
break;
case 27:

            this.$ = {
                type: 'call',
                token: $$[$0],
                pos: this._$
            };
        
break;
case 28:

            this.$ = {
                type: 'call',
                token: $$[$0-1] + $$[$0],
                pos: this._$
            };
        
break;
case 29:

            this.$ = {
                type: 'call',
                token: $$[$0-5] + $$[$0-3],
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 56:

            this.$ = {
                type: 'index',
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 57:

            this.$ = {
                type: 'stack',
                token: $$[$0-1],
                pos: this._$
            };
        
break;
case 58:

            this.$ = {
                type: 'stack',
                token: $$[$0-3],
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 68:
this.$ = Number($$[$0]);
break;
case 69:
this.$ = true;
break;
case 70:
this.$ = false;
break;
case 71:
this.$ = NaN;
break;
case 72:
this.$ = undefined;
break;
case 74:
this.$ = $$[$0-1];
break;
case 75:
this.$ = '';
break;
case 77:
this.$ = $$[$0-1] + $$[$0];
break;
case 80:

            this.$ = {
                '0': '\0',
                'b': '\b',
                'f': '\f',
                'n': '\n',
                'r': '\r',
                't': '\t',
                'v': '\v',
                '\'': '\'',
                '\\': '\\',
            }[yytext.slice(1)];
        
break;
case 81:
this.$ = String.fromCharCode(parseInt(yytext.slice(2, -1), 16));
break;
case 82:

            this.$ = {
                type: 'lambda',
                params: $$[$0-5],
                expression: $$[$0-1],
                pos: this._$
            };
        
break;
case 83:

            this.$ = {
                type: 'lambda',
                params: [],
                expression: $$[$0-1],
                call: {
                    token: $$[$0-2],
                    pos: this._$
                },
                pos: this._$
            };
        
break;
case 84:

            this.$ = {
                type: 'lambda',
                params: [],
                expression: $$[$0-1],
                call: {
                    token: $$[$0-3] + $$[$0-2],
                    pos: this._$
                },
                pos: this._$
            };
        
break;
case 87:

            this.$ = [$$[$0]];
            this.$.rest = true;
        
break;
case 88:
this.$ = [];
break;
case 89:

            this.$ = {
                type: 'branch',
                yes: $$[$0-3],
                no: $$[$0-1],
                pos: this._$
            };
        
break;
case 90:

            this.$ = {
                type: 'branch',
                yes: $$[$0-1],
                pos: this._$
            };
        
break;
case 91:

            this.$ = {
                type: 'cases',
                cases: $$[$0-1]
            };
        
break;
case 94:

            this.$ = {
                type: 'branch',
                condition: $$[$0-2],
                yes: $$[$0]
            };
        
break;
case 95:

            this.$ = {
                type: 'iterate',
                lambda: $$[$0-3],
                mode: $$[$0-2],
                token: $$[$0-1],
                pos: this._$
            };
        
break;
case 96:

            this.$ = {
                type: 'iterate',
                lambda: $$[$0-4],
                condition: $$[$0-1],
                mode: $$[$0-3],
                token: $$[$0-2],
                pos: this._$
            };
        
break;
case 102:

            this.$ = {
                type: 'get',
                token: $$[$0-1],
                name: $$[$0],
                pos: this._$
            };
        
break;
case 103:

            this.$ = {
                type: 'get',
                token: '$...',
                name: $$[$0-3],
                slice: $$[$0-1],
                pos: this._$
            };
        
break;
case 104:

            this.$ = {
                type: 'slice',
                index: $$[$0],
                pos: this._$
            };
        
break;
case 105:

            this.$ = {
                type: 'slice',
                from: $$[$0-1],
                pos: this._$
            };
        
break;
case 106:

            this.$ = {
                type: 'slice',
                from: $$[$0-2],
                to: $$[$0],
                pos: this._$
            };
        
break;
}
},
table: [{3:1,4:2,6:[1,3],7:4,8:5,9:6,10:$V0,15:8,16:$V1,17:$V2,18:$V3},{1:[3]},{5:[1,12]},{1:[2,2]},{5:[2,3]},{5:[2,5]},{5:[2,6]},{11:13,13:[1,14],14:[1,15]},{12:16,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VE,[2,11]),o($VE,[2,12]),o($VE,[2,13]),{6:[1,67],7:68,8:5,9:6,10:$V0,15:8,16:$V1,17:$V2,18:$V3},{12:69,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VE,[2,8]),o($VE,[2,9]),{5:[2,10],16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VF,[2,14]),o($VF,[2,16]),o($VF,[2,17]),o($VF,[2,18]),o($VF,[2,19]),o($VF,[2,20]),o($VF,[2,21]),o($VF,[2,22]),o($VF,[2,23]),o($VF,[2,24]),o($VF,[2,25]),o($VF,[2,26]),o($VF,[2,27]),{31:71,33:[1,72],37:$V9,38:$Va},o($VF,[2,68]),o($VF,[2,69]),o($VF,[2,70]),o($VF,[2,71]),{16:[1,77],17:[1,78],18:[1,83],23:76,36:[1,73],37:[1,82],39:[1,79],40:[1,80],43:[1,85],44:[1,81],47:[1,84],60:[1,74],61:75,74:$VB},o($VF,[2,73]),o($VG,[2,88],{75:86,10:[1,89],32:[1,88],37:[1,87],78:[1,90]}),{12:91,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,81:92,82:93,86:$VD},{10:[1,94],33:[1,95]},o($VF,[2,32]),o($VF,[2,33]),o($VF,[2,34]),o($VF,[2,35]),o($VF,[2,36]),o($VF,[2,37]),o($VF,[2,38]),o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),o($VF,[2,52]),o($VF,[2,53]),o($VF,[2,54]),o($VF,[2,55]),o($VF,[2,30]),o($VF,[2,31]),{67:[1,97],68:96,69:98,70:$VH,71:100,72:$VI,73:$VJ},{1:[2,1]},{5:[2,4]},{5:[2,7],16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VF,[2,15]),o($VF,[2,28]),{31:103,37:$V9,38:$Va},o($VF,[2,72]),{34:[1,104]},{34:[1,106],36:[1,105]},{32:[1,108],37:[1,109],84:107},o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,63]),o($VK,[2,64]),o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,67]),{34:[1,111],76:[1,110]},{12:112,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},{37:[1,113]},o($VG,[2,85]),{10:[1,114]},{16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,34:[1,115],37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,80:[1,116],83:$VL,86:$VD},{34:[1,119],80:[1,118]},o($VM,[2,92]),o($VF,[2,102]),{10:[1,120]},{67:[1,121],69:122,70:$VH,71:100,72:$VI,73:$VJ},o($VF,[2,75]),o($VN,[2,76]),o($VN,[2,78]),o($VN,[2,79]),o($VN,[2,80]),o($VN,[2,81]),{34:[1,123]},{12:125,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,35:124,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VF,[2,57]),{12:125,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,35:126,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},{17:[1,130],44:[1,128],45:[1,129],85:127},o($VO,[2,97]),o($VO,[2,98]),{77:[1,131]},{10:[1,132]},{16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,76:[1,133],79:$VC,86:$VD},{12:134,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VG,[2,87]),{12:135,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VF,[2,90]),{12:136,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VF,[2,91]),{12:138,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,82:137,86:$VD},{34:[1,139]},o($VF,[2,74]),o($VN,[2,77]),{12:125,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,35:140,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},{36:[1,141]},{16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,34:[1,142],36:[2,104],37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},{36:[1,143]},{23:145,36:[1,144],74:$VB},o($VP,[2,99]),o($VP,[2,100]),o($VP,[2,101]),{74:[1,146]},o($VG,[2,86]),o($VF,[2,83]),{16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,76:[1,147],79:$VC,86:$VD},{16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,80:[1,148],86:$VD},o($VM,[2,94],{20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,66:36,19:70,16:$V4,17:$V5,18:$V6,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,67:$VA,74:$VB,79:$VC,86:$VD}),o($VM,[2,93]),{16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,83:$VL,86:$VD},{12:125,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,35:149,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},{36:[1,150]},o($VF,[2,56]),{12:151,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,36:[2,105],37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VF,[2,58]),o($VF,[2,95]),{36:[1,152]},{12:153,16:$V4,17:$V5,18:$V6,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VF,[2,84]),o($VF,[2,89]),{36:[1,154]},o($VF,[2,29]),{16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,36:[2,106],37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,79:$VC,86:$VD},o($VF,[2,96]),{16:$V4,17:$V5,18:$V6,19:70,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:26,29:27,30:28,31:29,32:$V7,33:$V8,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:36,67:$VA,74:$VB,76:[1,155],79:$VC,86:$VD},o($VF,[2,103]),o($VF,[2,82])],
defaultActions: {3:[2,2],4:[2,3],5:[2,5],6:[2,6],67:[2,1],68:[2,4]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Ignore whitespace
break;
case 1:// Ignore comments
break;
case 2:this.begin('CMT');
break;
case 3:this.popState();
break;
case 4:// Ignore comments
break;
case 5:return 62;
break;
case 6:return 62;
break;
case 7:return 62;
break;
case 8:return 62;
break;
case 9:return 10;
break;
case 10:return 59;
break;
case 11:return 78;
break;
case 12:return 14;
break;
case 13:return this.begin('LMB'), '=>';
break;
case 14:return 50;
break;
case 15:return 49;
break;
case 16:return 51;
break;
case 17:return 52;
break;
case 18:return 53;
break;
case 19:return 54;
break;
case 20:return 55;
break;
case 21:return 56;
break;
case 22:return 57;
break;
case 23:return 58;
break;
case 24:return 38;
break;
case 25:return 64;
break;
case 26:return 63;
break;
case 27:return 65;
break;
case 28:return this.begin('STR'), '\'';
break;
case 29:return "CHAR_ESCAPE";
break;
case 30:return "HEX_ESCAPE";
break;
case 31:return this.popState(), '\'';
break;
case 32:return "ANY";
break;
case 33:return 13;
break;
case 34:return 83;
break;
case 35:return 32;
break;
case 36:return 37;
break;
case 37:return 86;
break;
case 38:return 34;
break;
case 39:return 60;
break;
case 40:return 5;
break;
case 41:return 33;
break;
case 42:return 36;
break;
case 43:return 79;
break;
case 44:return 80;
break;
case 45:return 74;
break;
case 46:return 76;
break;
case 47:return this.popState(), ')';
break;
case 48:return 39;
break;
case 49:return 40;
break;
case 50:return "*";
break;
case 51:return 42;
break;
case 52:return 16;
break;
case 53:return 17;
break;
case 54:return 18;
break;
case 55:return 47;
break;
case 56:return 48;
break;
case 57:return 43;
break;
case 58:return 46;
break;
case 59:return 44;
break;
case 60:return 45;
break;
case 61:return 6;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:[\s\S])/,/^(?:-?0[bB][01]+)/,/^(?:-?0[oO][0-7]+)/,/^(?:-?0[xX]([0-9a-fA-F])+)/,/^(?:-?(\d+(?:\.\d+)?)((?:[eE][+-]?[0-9]+))?)/,/^(?:([A-Za-z_])\w*)/,/^(?:>>>)/,/^(?:\.\.\.)/,/^(?:#=)/,/^(?:=>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\/\/)/,/^(?:\*\*)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\$@)/,/^(?:!\?)/,/^(?:!!)/,/^(?:!%)/,/^(?:')/,/^(?:\\[0bfnrtv'\\])/,/^(?:\\\{([0-9a-fA-F]){1,6}\})/,/^(?:')/,/^(?:.)/,/^(?:=)/,/^(?::)/,/^(?:#)/,/^(?:@)/,/^(?:\$)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:\?)/,/^(?:~)/,/^(?:%)/,/^(?:\^)/,/^(?:&)/,/^(?:\|)/,/^(?:$)/],
conditions: {"STR":{"rules":[29,30,31,32],"inclusive":false},"CMT":{"rules":[3,4],"inclusive":false},"LMB":{"rules":[0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"INITIAL":{"rules":[0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = rpnlang;
exports.Parser = rpnlang.Parser;
exports.parse = function () { return rpnlang.parse.apply(rpnlang, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}